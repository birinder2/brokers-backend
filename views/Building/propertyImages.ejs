<%- contentFor('HeaderCss') %>
<style>
  .upload-drop-zone {
    border: 2px dashed #ccc;
    padding: 40px;
    text-align: center;
    border-radius: 6px;
    cursor: pointer;
    transition: 0.2s;
  }

  .upload-drop-zone.dragover {
    background-color: #f0f0f0;
    border-color: #333;
  }

  .file-item {
    display: flex;
    align-items: center;
    justify-content: space-between;
    background: #f9f9f9;
    border: 1px solid #ddd;
    margin-top: 10px;
    padding: 10px;
    border-radius: 4px;
  }

  .file-item .file-name {
    white-space: normal; /* allow line breaks */
    word-break: break-word; /* wrap long words if needed */
  }

  .file-item .file-size {
    color: gray;
    font-size: 0.85rem;
    margin-left: 10px;
  }

  .file-item .delete-btn {
    cursor: pointer;
    color: red;
  }

  .upload-area {
      border: 2px dashed #999;
      padding: 20px;
      text-align: center;
      cursor: pointer;
      margin-bottom: 20px;
    }

    .preview-container {
      display: flex;
      flex-wrap: wrap;
    }

    .preview-box {
      position: relative;
      width: 110px;
      height: 110px;
      overflow: hidden;
    }

    .added-image-wrapper {
      box-shadow: 0.025rem 0 1.35rem rgba(0,0,0,.075) !important;
    }

    .preview-box img {
      position: absolute;
      top: 50%;
      left: 50%;
      width: auto;
      height: 100%;
      transform: translate(-50%, -50%);
    }
    .remove-btn {
      position: absolute;
      top: 5px;
      right: 5px;
      background: red;
      color: white;
      border: none;
      border-radius: 50%;
      cursor: pointer;
      width: 25px;
      height: 25px;
      font-size: 16px;
    }

</style>
  <!-- Plugins css -->
  <link href="public/assets/libs/dropzone/min/dropzone.min.css" rel="stylesheet" type="text/css">

  <link href="public/assets/libs/sweetalert2/sweetalert2.min.css" rel="stylesheet" type="text/css">

<%- contentFor('body') %>

    <div class="row mb-4">
      <div class="col-sm-6">
          <!-- <h4 class="fw-normal">Building Id #60735 <span class="badge bg-success ms-2 bg-opacity-25">Published</span></h4> -->
      </div> 
      <div class="col-sm-6 text-end">
          <button type="button" class="btn btn-blue-grey waves-effect waves-light me-1" id="backBtn">Back</button>
      </div>
    </div>
    <div class="row">
        <div class="col-12">
            <div class="card">
                <div class="card-body">
                  <h4 class="card-title mb-3">Upload New Images</h4>
                    <!-- Drop Area -->
                    <div class="upload-drop-zone mb-3 d-flex align-items-center flex-column position-relative" id="dropZone">
                        <div class="mb-3">
                            <i class="mdi mdi-cloud-upload display-4 text-muted"></i>
                        </div>
                        <h4>Drop files here or click to upload.</h4>
                        <p>Select Images (Only 2280x1800 allowed)</p>
                        <input type="file" id="images" name="images" multiple  hidden>
                        <button class="btn btn-link mt-4 text-secondary stretched-link border-0" id="browseBtn">Browse for file</button>
                    </div>
                    
                    <div class="preview-container gap-2" id="previewContainer"></div>

                    <div class="d-flex justify-content-center mt-4">
                      <button type="button" class="btn btn-success" id="uploadBtn">Upload Images</button>
                  </div>
                    <!-- File List -->

                    <!-- Hidden Form -->
                    <form id="uploadForm" enctype="multipart/form-data">
                      <input type="hidden" name="building_id" name="building_id" value="<%= property?.id %>" />
                    </form>
                </div>
              </div>
        </div>

        <div class="card">
          <div class="card-body">
              <div class="row align-items-center">
                <div class="col-md-6">
                    <h4 class="card-title">Building Images List</h4>
                </div>
                <div class="col-md-6 text-end">
                    <button type="button" class="btn btn-info" id="publish">Publish</button>
                    <button type="button" class="btn btn-warning" id="unpublish">Unpublish</button>  
                    <button type="button" class="btn btn-danger" id="deleteSelectedBtn">Delete</button>  
                </div>
              </div>
              <div class="table-wrapper">
                <table id="orulo-table" class="data-table table table-striped table-centered dt-responsive table-vertical" style="border-collapse: collapse; border-spacing: 0; width: 100%;">
                    <thead>
                        <tr>
                            <th class="no-sort">
                                <div class="form-check">
                                    <input type="checkbox" value="" class="form-check-input select-all" />
                                </div>
                            </th>
                            <!-- <th>Id</th> -->
                            <th>Images</th>
                             <th>Title</th>
                            <th>Description</th>
                            <th>Set Default Image</th>
                            <th>Status</th>
                            <th>Action</th>
                        </tr>
                    </thead>
                    <tbody id="fileList">
                    </tbody>
                </table>
              </div>
              <div class="row">
                <div class="col-md-12 text-end">
                    <div id="pagination"></div>
                </div>
              </div>
          </div>
        </div>
            
        <!-- Pagination controls -->
    </div> <!-- end col -->

    <!-- Modal -->
    <div class="modal fade" id="editImageModal" tabindex="-1" aria-labelledby="editImageModalLabel" aria-hidden="true">
      <div class="modal-dialog modal-sm">
        <div class="modal-content">
          <div class="modal-header">
            <h5 class="modal-title" id="editImageModalLabel">Edit Image Info</h5>
            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
          </div>
          <div class="modal-body">
            <form id="editImageForm">
              <input type="hidden" id="editImageId" />
              <div class="mb-3">
                <label for="imageTitle" class="form-label">Title</label>
                <input type="text" class="form-control" id="imageTitle" required />
              </div>
              <div class="mb-3">
                <label for="imageDescription" class="form-label">Description</label>
                <textarea class="form-control" id="imageDescription" required></textarea>
              </div>
              <div class="text-end">
                <button type="submit" class="btn btn-primary btn-sm">Save Changes</button>
              </div>
            </form>
          </div>
        </div>
      </div>
    </div>

<%- contentFor('FooterJs') %>
<!-- Plugins js -->
<script src="public/assets/libs/dropzone/min/dropzone.min.js"></script>
<!-- Sweet Alerts js -->
<script src="public/assets/libs/sweetalert2/sweetalert2.min.js"></script>

<%- contentFor('BottomJs') %>
<script>
  document.getElementById('backBtn').addEventListener('click', function () {
      const params = new URLSearchParams(window.location.search);
      params.delete('propertyId'); // Remove propertyId
      const newQueryString = params.toString();
      params.size === 0 ? window.location.href = `/developer-project` : window.location.href = `/developer-project?${newQueryString}`;
  });
</script>
<script>
  $(document).ready(function () {
    const dropZone = $("#dropZone");
    const fileInput = $("#images");
    const fileList = $("#fileList");
    const pagination = $("#pagination");
    const buildingId = "<%= property?.id %>";
    const proId =  "<%= property?._id %>";
    console.log(buildingId);
    $("#previewContainer").empty();
    let selectedFiles = [];

    // Handle 'Select All' checkbox click
    $(document).on("change", ".select-all", function () {
      let isChecked = $(this).is(":checked");
      $(".row-select").prop("checked", isChecked);
    });

    // Update 'Select All' checkbox based on individual row checkbox changes
    $(document).on("change", ".row-select", function () {
      let total = $(".row-select").length;
      let checked = $(".row-select:checked").length;
      $(".select-all").prop("checked", total === checked);
    });

    // function updateUploadButtonLabel() {
    //   $("#uploadBtn").text(`Upload Images (${selectedFiles.length})`);
    //   $("#uploadBtn").prop("disabled", selectedFiles.length === 0);
    // }

    // $('#uploadArea').on('click', () => {
    //   $('#imageInput').click();
    // });

    // $('#uploadArea').on('dragover', function (e) {
    //   e.preventDefault();
    //   $(this).css('background', '#f0f0f0');
    // });

    // $('#uploadArea').on('dragleave', function (e) {
    //   e.preventDefault();
    //   $(this).css('background', '');
    // });

    // $('#uploadArea').on('drop', function (e) {
    //   e.preventDefault();
    //   $(this).css('background', '');
    //   handleFiles(e.originalEvent.dataTransfer.files);
    // });

    // $('#imageInput').on('change', function () {
    //   handleFiles(this.files);
    // });
    $("#uploadArea").on("dragover", function (e) {
      e.preventDefault();
      $(this).addClass("dragover");
    });

    $("#uploadArea").on("dragleave", function (e) {
      e.preventDefault();
      $(this).removeClass("dragover");
    });

    $("#uploadArea").on("drop", function (e) {
      e.preventDefault();
      $(this).removeClass("dragover");
      const files = e.originalEvent.dataTransfer.files;
      processAndPreviewFiles(files);
    });

    function processAndPreviewFiles(files) {
      for (let file of files) {
        if (!file.type.startsWith("image/")) continue;

        const fileExists = selectedFiles.find(
          (f) => f.name === file.name && f.size === file.size
        );
        if (fileExists) continue;

        selectedFiles.push(file);

        const reader = new FileReader();
        reader.onload = function (e) {
          const imgHtml = `
        <div class="preview-box" data-name="${file.name}">
          <img src="${e.target.result}" alt="preview">
          <button class="remove-btn bg-danger p-0" title="Remove"><i class="mdi mdi-delete"></i></button>
        </div>
      `;
          $("#previewContainer").append(imgHtml);
        };
        reader.readAsDataURL(file);
      }

      updateUploadButtonLabel();
    }


    function handleFiles(files) {
      for (let file of files) {
        if (!file.type.startsWith("image/")) continue;

        selectedFiles.push(file);
        const reader = new FileReader();
        reader.onload = function (e) {
          const imgHtml = `
            <div class="preview-box" data-name="${file.name}">
              <img src="${e.target.result}" alt="">
              <button class="remove-btn bg-danger p-0" title="Remove"><i class="mdi mdi-delete "></i></button>
            </div>
          `;
          $("#previewContainer").append(imgHtml);
        };
        reader.readAsDataURL(file);
      }
    }

    // Delete image preview and remove file from selectedFiles
    // $("#previewContainer").on("click", ".remove-btn", function () {
    //   const parentBox = $(this).closest(".row");
    //   const fileName = parentBox.data("name");
    //   //selectedFiles = selectedFiles.filter((f) => f.name !== fileName);
      
    //   console.log("selectedFiles",selectedFiles);
    //   console.log("Current files:", selectedFiles.map(f => f.name));

    //   //$(`.file-item[data-name="${fileName}"]`).remove();
    //   console.log("trigger");
    //   parentBox.remove();
    //   updateUploadButtonLabel();
    //   console.log("trigger 2");

    // });

    $("#previewContainer").on("click", ".remove-btn", function () {
      const wrapper = $(this).closest(".image-wrapper");
      const fileName = wrapper.attr("data-name");

      // Remove file from selectedFiles
      selectedFiles = selectedFiles.filter(f => f.name !== fileName);

      // Remove entire preview + description
      wrapper.remove();

      updateUploadButtonLabel();
    });

    // Load paginated existing images
    function loadExistingImages(page = 1) {
      $.get(`/list-images/${buildingId}?page=${page}`, function (res) {
        if (res.success && Array.isArray(res.images)) {
          fileList.empty(); // Clear previews
          res.images.forEach((img) => appendImageItem(img));

          if (res.totalPages > 1) {
            renderPagination(res.totalPages, page);
          } else {
            pagination.empty();
          }
        }
      });
    }

    // Render pagination outside fileList
    function renderPagination(total, current) {
      let html = '<nav><ul class="pagination justify-content-end">';
      for (let i = 1; i <= total; i++) {
        html += `<li class="page-item ${i === current ? "active" : ""}">
          <a class="page-link" href="#" data-page="${i}">${i}</a></li>`;
      }
      html += "</ul></nav>";
      pagination.html(html);
    }

    pagination.on("click", ".page-link", function (e) {
      e.preventDefault();
      const page = parseInt($(this).data("page"));
      loadExistingImages(page);
    });

    function appendImageItem(image) {
      const thumbUrl = image["2280x1800"] || image["520x280"];
      const isChecked = image.status === "enabled" ? "checked" : "";

      const switchHTML = image.isDefault === true
        ? `<span class="badge bg-success">Set image default</span>`
        : `
          <input class="form-check form-switch default-image-switch" type="checkbox" id="switch3-${image._id}" 
            switch="bool" 
            data-property-id="${proId}"
            data-image-id="${image._id}"
            data-id="${buildingId}" >
          <label class="form-label" for="switch3-${image._id}" data-on-label="Yes" data-off-label="No"></label>`;

      const item = $(
        `
       <tr>
                                    <td>
                                        <div class="form-check">
                                            <input type="checkbox" class="status-checkbox form-check-input row-select" data-id="${
                                              image._id
                                            }"/>
                                        </div>
                                    </td>
                                    <td class="product-list-img">
                                        <img src="${thumbUrl || 'public/assets/images/placeholder-img.webp'}" class="img-fluid avatar-md rounded" alt="${
                                        image.title
                                      }" onerror="this.onerror=null;this.src='public/assets/images/placeholder-img.webp'">
                                    </td>
                                    <td>
                                        <h6 class="mt-0 mb-1">${
                                          image.title || "No title"
                                        }</h6>
                                    </td>
                                    <td>
                                        <h6 class="mt-0 mb-1">${
                                          image.description || "No description"
                                        }</h6>
                                    </td>
                                    <td>
                                          ${switchHTML}
                                    </td>
                                    <td> <span class="badge font-size-14 text-capitalize ${image.status === "enabled" ? 'bg-success' : 'bg-danger'}">${
                                            image.status === "enabled" ? "Publish" : "Inactive"
                                          }</span>
                                    </td>
                                    <td>
                                        <div class="text-center">
                                            <button type="button"
                                              class="btn btn-primary btn-sm edit-image-btn"
                                              data-id="${image._id}"
                                              data-title="${image.title || ''}"
                                              data-description="${image.description || ''}"
                                              data-bs-toggle="modal"
                                              data-bs-target="#editImageModal">
                                              Edit
                                            </button>
                                        </div>
                                    </td>
                                </tr>
      `
      );
      fileList.append(item);
    }

     

    dropZone.on("dragover", function (e) {
      e.preventDefault();
      dropZone.addClass("dragover");
    });

    dropZone.on("dragleave", function () {
      dropZone.removeClass("dragover");
    });

    dropZone.on("drop", function (e) {
      e.preventDefault();
      dropZone.removeClass("dragover");
      const files = e.originalEvent.dataTransfer.files;
      processAndPreviewFiles(files);
    });

    $("#browseBtn").click(() => fileInput.click());

    fileInput.on("change", function () {
      processAndPreviewFiles(this.files);
      fileInput.val("");
    });

    function processAndPreviewFiles(files) {
      for (let i = 0; i < files.length; i++) {
        const file = files[i];
        if (!file.type.startsWith("image/")) continue;

        const reader = new FileReader();
        reader.onload = function (e) {
          const img = new Image();
          img.onload = function () {
            //if (img.width === 2280 && img.height === 1800) {
              selectedFiles.push(file);

              const previewHtml = `
                <div class="image-wrapper row mb-3" data-name="${file.name}">
                  <div class="col-md-12">
                  <div class="preview-box" >
                    <img src="${e.target.result}" alt="">
                    <button class="remove-btn" title="Remove">&times;</button>
                  </div>
                  </div>
                  <div class="col-md-12">
                      <div class="mb-3">
                          <label class="form-label" for="developerName">Add image description</label>
                          <input id="description" name="description" type="text" class="form-control desc-input" placeholder="Enter description">
                      </div>
                  </div>
                  </div>

                `;
              $("#previewContainer").append(previewHtml);
              updateUploadButtonLabel();
            // } else {
            //    Swal.fire("", `${file.name} - Invalid size (${img.width}x${img.height})`, "error");
            //   updateUploadButtonLabel();
            // }
            //selectedFiles.push(file);

            //   const previewHtml = `
            // <div class="row">
            //   <div class="col-md-12">
            //   <div class="preview-box" data-name="${file.name}">
            //     <img src="${e.target.result}" alt="">
            //     <button class="remove-btn" title="Remove">&times;</button>
            //   </div>
            //   </div>
            //   <div class="col-md-12">
            //       <div class="mb-3">
            //           <label class="form-label" for="developerName">Add image description</label>
            //           <input id="description" name="description" type="text" class="form-control" placeholder="Enter description">
            //       </div>
            //   </div>
            //   </div>

            // `;
            //   $("#previewContainer").append(previewHtml);
            //$('#fileList').prepend(`<div class="file-item text-success" data-name="${file.name}">${file.name} - Ready to upload</div>`);
            //updateUploadButtonLabel();
          };
          img.src = e.target.result;
        };
        reader.readAsDataURL(file);
      }
    }

   

    // Append the Upload button after fileList
    // $("#previewContainer").after(
    //   '<button type="button" id="uploadBtn" class="btn btn-primary waves-effect waves-light mt-4">Send Files</button>'
    // );
    // function updateUploadButtonLabel() {
    //   $("#uploadBtn").text(`Send Files (${selectedFiles.length})`);
    // }

    function updateUploadButtonLabel() {
        const count = selectedFiles.length;
        $("#uploadBtn").text(`Upload Images (${count})`);
    }

    $("#uploadBtn").on("click", function () {
      if (selectedFiles.length === 0) {
        //alert("No valid images to upload.");
        Swal.fire("", "No valid images to upload.", "error");

        return;
      }

      // const description = $("#description").val();

      // if (!description) {
      //   //alert("Description is required.");
      //   Swal.fire("", "Description is required.", "error");

      //   return;
      // }

      const formData = new FormData();
      formData.append("buildingId", buildingId);
      // formData.append("description", description);

      // selectedFiles.forEach((f) => formData.append("images", f));

      let hasMissingDescription = false;

      selectedFiles.forEach((file, index) => {
        formData.append("images", file);

        const descInput = $(".desc-input").eq(index);
        const desc = descInput.val() || '';

        if (!desc) {
          hasMissingDescription = true;
        }

        formData.append("descriptions[]", desc);
      });

      $('#status').fadeIn();
      $('#preloader').fadeIn('slow');
                
      $('#uploadBtn').prop('disabled', true);

      // if (hasMissingDescription) {
      //   Swal.fire("", "Each image must have a description.", "error");
      //   return;
      // }

      $.ajax({
        url: "/upload-property-image",
        type: "POST",
        data: formData,
        contentType: false,
        processData: false,
        success: function (res) {
          if (res.success && Array.isArray(res.images)) {
            $("#fileList").html("");
            $("#previewContainer").empty();
            selectedFiles.length = 0;
            updateUploadButtonLabel();
            res.images.forEach((img) => appendImageItem(img));
            loadExistingImages(); // Reload pagination view
          } else {
            //alert("Upload failed.");
            Swal.fire("", res.message, "error");
          }
        },
        error: function (xhr) {
            if (xhr.status === 401) {
              Swal.fire("", "Token is expired or missing", "error");
              window.location.href = "/login";
            } else {
              Swal.fire(
                "",
                xhr.responseJSON.message || "An error occurred. Please try again.",
                "error"
              );
            }
          },
          complete: function () {
                    // always re-enable
                    // $('#overlayLoader').fadeOut();
                    $('#status').fadeOut();
                    $('#preloader').fadeOut('slow');
                    $('#uploadBtn').prop('disabled', false); 
           }
      });
    });

    $(document).on('change', '.default-image-switch', function () {
            const isChecked = $(this).is(':checked');
            const propertyId = $(this).data('property-id');
            const imageId = $(this).data('image-id');
            const buildingId = $(this).data('id');

            console.log("propertyId",propertyId,"imageId",imageId,"buildingId",buildingId);

            if (isChecked) {
              $('.default-image-switch').not(this).prop('checked', false);

              $.ajax({
                url: '/setDefaultImge',
                method: 'POST',
                contentType: 'application/json',
                data: JSON.stringify({ propertyId, imageId,buildingId }),
                success: function (res) {
                  if(res.status == true){
                     //Swal.fire("", res.message, "success");
                     Swal.fire({
                      title: "",
                      text: res.message,
                      icon: "success",
                      timer: 1500,
                      showConfirmButton: false
                    }).then(() => {
                      location.reload();
                    });

                  } else {
                      console.log('Default image updated:', res);
                      Swal.fire("", res.message, "error");
                  }
                },
                error: function (xhr) {
                  if (xhr.status === 401) {
                    Swal.fire("", "Token is expired or missing", "error");
                    window.location.href = "/login";
                  } else {
                    Swal.fire(
                      "",
                      "An error occurred. Please try again.",
                      "error"
                    );
                  }
                },
              });
            }
      });


    $("#publish, #unpublish").on("click", function () {
        const isPublish = $(this).attr("id") === "publish";
        const newStatus = isPublish ? "enabled" : "disabled";
        const updates = [];

        $(".status-checkbox:checked").each(function () {
          const id = $(this).data("id");
          updates.push({ id, status: newStatus });
        });

        if (updates.length === 0) {
        Swal.fire("", "Please select at least one image.", "warning");
        return;
      }

        $.ajax({
          url: "/update-image-status",
          type: "PUT",
          contentType: "application/json",
          data: JSON.stringify({
            building_id: buildingId, // make sure this is defined in your scope
            updates,
          }),
          success: function (res) {
            if (res.success == true) {
              Swal.fire("", res.message, "success");
              loadExistingImages(); // Refresh the view
            } else {
              Swal.fire("", res.message, "error");
            }
          },
          error: function (xhr) {
            if (xhr.status === 401) {
              Swal.fire("", "Token is expired or missing", "error");
              window.location.href = "/login";
            } else {
              Swal.fire(
                "",
                xhr.responseJSON.message || "An error occurred. Please try again.",
                "error"
              );
            }
          },
        });
      });


    // $("#updateStatusBtn").on("click", function () {
    //   const updates = [];

    //   $(".status-checkbox").each(function () {
    //     const id = $(this).data("id");
    //     const status = $(this).is(":checked") ? "enabled" : "disabled";
    //     updates.push({ id, status });
    //   });

    //   $.ajax({
    //     url: "/update-image-status",
    //     type: "PUT",
    //     contentType: "application/json",
    //     data: JSON.stringify({
    //       building_id: buildingId, // replace with actual value
    //       updates,
    //     }),
    //     success: function (res) {
    //       if (res.status == true) {
    //         Swal.fire("", res.message, "error");
    //         loadExistingImages(); // Refresh the view
    //       } else {
    //         Swal.fire("", res.message, "error");
    //       }
    //     },
    //     error: function (xhr) {
    //       if (xhr.status === 401) {
    //         //showNotification('error', 'Token is expired or missing');
    //         Swal.fire("", "Token is expired or missing", "error");

    //         window.location.href = "/login";
    //       } else {
    //         //showNotification('error', xhr.responseJSON.message || 'An error occurred. Please try again.');
    //         Swal.fire(
    //           "",
    //           xhr.responseJSON.message ||
    //             "An error occurred. Please try again.",
    //           "error"
    //         );
    //       }
    //       //$(".loader").fadeOut();
    //     },
    //   });
    // });


    $("#deleteSelectedBtn").on("click", function () {
        const selectedIds = [];

        $(".status-checkbox:checked").each(function () {
          selectedIds.push($(this).data("id"));
        });

        if (selectedIds.length === 0) {
          Swal.fire("", "Please select at least one image to delete.", "warning");
          return;
        }

        Swal.fire({
          title: "Are you sure?",
          text: `You are about to delete ${selectedIds.length} image(s). You won't be able to revert back!.`,
          icon: "warning",
          showCancelButton: true,
          confirmButtonColor: "#4ac18e",
          cancelButtonColor: "#f46a6a",
          confirmButtonText: "Yes, delete them!"
        }).then(function (result) {
          if (result.isConfirmed) {
            $.ajax({
              url: `/delete-multiple-images`,
              type: "DELETE",
              contentType: "application/json",
              data: JSON.stringify({ imageIds: selectedIds }),
              success: function (res) {
                if (res.success) {
                  Swal.fire("", res.message, "success");
                  loadExistingImages(); // refresh view
                } else {
                  Swal.fire("", res.message || "Delete failed.", "error");
                }
              },
              error: function (xhr) {
                Swal.fire("", xhr.responseJSON?.message || "An error occurred.", "error");
              }
            });
          }
        });
      });

    fileList.on("click", ".delete-btn", function () {
        const button = $(this); // store the clicked delete button

      Swal.fire({
        title: "Are you sure?",
        text: "You won't be able to revert back!",
        icon: "warning",
        showCancelButton: true,
        confirmButtonColor: "#4ac18e",
        cancelButtonColor: "#f46a6a",
        confirmButtonText: "Yes, delete it!",
      }).then(function (result) {
        if (result.value) {
          // const button = $(this); // Important: preserve the clicked context
          const id = button.data("id");
          const item = button.closest(".file-item")

          $.ajax({
            url: `/delete-property-image/${id}`,
            type: "DELETE",
            success: function (res) {
              if (res.success == true) {
                item.remove();
                loadExistingImages(); // Refresh after delete
              } else {
                //alert("Delete failed.");
                Swal.fire("", "An error occurred. Please try again.", "error");
              }
            },
            error: function (xhr) {
              if (xhr.status === 401) {
                //showNotification('error', 'Token is expired or missing');
                Swal.fire("", "Token is expired or missing", "error");

                window.location.href = "/login";
              } else {
                //showNotification('error', xhr.responseJSON.message || 'An error occurred. Please try again.');
                Swal.fire(
                  "",
                  xhr.responseJSON.message ||
                    "An error occurred. Please try again.",
                  "error"
                );
              }
              //$(".loader").fadeOut();
            },
          });
        }
      });
    });

    $(document).on("click", ".edit-image-btn", function () {
      const imageId = $(this).data("id");
      const title = $(this).data("title");
      const description = $(this).data("description");

      $("#editImageId").val(imageId);
      $("#imageTitle").val(title);
      $("#imageDescription").val(description);
    });


    $("#editImageForm").submit(function (e) {
      e.preventDefault();

      const imageId = $("#editImageId").val().trim();
      const title = $("#imageTitle").val().trim();
      const description = $("#imageDescription").val().trim();
      const building_id = buildingId;

      if (!title || !description) {
        Swal.fire("Error", "Both Title and Description are required.", "error");
        return;
      }

      $.ajax({
        url: "/updateImageInfo", // Replace with your actual API route
        method: "POST",
        contentType: "application/json",
        data: JSON.stringify({
          buildingId:building_id,
          imageId,
          title,
          description
        }),
        success: function (response) {
          if (response.success == true) {
            Swal.fire("Success", "Image info updated!", "success");

            // Close modal
            const modalEl = document.getElementById("editImageModal");
            const modal = bootstrap.Modal.getInstance(modalEl);
            modal.hide();

            // Reload images (optional: keep on current page)
            loadExistingImages();
          } else {
            Swal.fire("Error", response.message || "Update failed.", "error");
          }
        },
        error: function (xhr) {
              if (xhr.status === 401) {
                //showNotification('error', 'Token is expired or missing');
                Swal.fire("", "Token is expired or missing", "error");

                window.location.href = "/login";
              } else {
                //showNotification('error', xhr.responseJSON.message || 'An error occurred. Please try again.');
                Swal.fire(
                  "",
                  xhr.responseJSON.message ||
                    "An error occurred. Please try again.",
                  "error"
                );
              }
              //$(".loader").fadeOut();
        },
      });
    });

    // Initial load
    loadExistingImages();
  });
</script>
