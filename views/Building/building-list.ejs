<%- contentFor('HeaderCss') %>
    <!-- DataTables -->
    <link href="public/assets/libs/datatables.net-bs4/css/dataTables.bootstrap4.min.css" rel="stylesheet" type="text/css">
    <link href="public/assets/libs/datatables.net-responsive-bs4/css/responsive.bootstrap4.min.css" rel="stylesheet"
        type="text/css">
        
    <link href="public/assets/libs/sweetalert2/sweetalert2.min.css" rel="stylesheet" type="text/css">
 

<%- contentFor('breadcrumb') %>

<%- contentFor('body') %>

    <div class="row">
        <div class="col-12">
            <div class="card">
                <div class="card-body">
                   
                    <!-- <div class="col-sm-6 text-end"></div> -->
                    <div class="">
                        <div class="text-end">
                            <a href="/addEditProperty" class="btn btn-primary">Add New Properties</a>
                        </div>
                        <div class="row my-3 justify-content-between align-items-center pb-3">
                            <div class="col-md-3">
                                <select id="pageSize" class="form-select" style="width: 100px;">
                                    <option value="10" selected>10</option>
                                    <option value="25">25</option>
                                    <option value="50">50</option>
                                </select>
                            </div>
                            <div class="col-md-3">
                                <input type="text" id="searchInput" class="form-control" placeholder="Search...">
                            </div>
                        </div>
                        <table id="representative-list" class="table table-striped table-centered dt-responsive table-vertical" style="border-collapse: collapse; border-spacing: 0; width: 100%;">
                            <thead>
                                <tr>
                                    <!-- <th>Id</th> -->
                                    <th>Image</th>
                                    <th>Name</th>
                                    <th>Address</th>
                                    <th>Status</th>
                                    <th>Action</th>
                                </tr>
                            </thead>
                            <tbody>
                                
                            </tbody>
                        </table>
                        <div class="d-flex justify-content-between align-items-center px-3 pb-3">
                            <div id="entriesInfo" class="text-muted small"></div>
                            <div id="pagination" class="d-flex"></div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

<%- contentFor('FooterJs') %>
    <script src="public/assets/libs/datatables.net/js/jquery.dataTables.min.js"></script>
    <script src="public/assets/libs/datatables.net-bs4/js/dataTables.bootstrap4.min.js"></script>
    <script src="public/assets/libs/datatables.net-responsive/js/dataTables.responsive.min.js"></script>
    <script src="public/assets/libs/datatables.net-responsive-bs4/js/responsive.bootstrap4.min.js"></script>
    
    <!-- Ecommerce init js -->
    <script src="public/assets/js/pages/ecommerce.init.js"></script> 

      <!-- Sweet Alerts js -->
    <script src="public/assets/libs/sweetalert2/sweetalert2.min.js"></script>

<%- contentFor('BottomJs') %>

<script>
    let currentPage = 1;
    let pageSize = 10;
    let searchQuery = "";
    let sortBy = "";
    let sortOrder = "";
    let setTimeoutVar;
    let selectedDeveloperId = "<%= developerId%>";
    let developerInitialId = "<%= developerId%>";

    function showNotification(type, message) {
        const alertClassMap = {
            success: "alert-success",
            info: "alert-info",
            warning: "alert-warning",
            danger: "alert-danger"
        };
        const iconMap = {
            success: "fa-check-circle",
            info: "fa-info-circle",
            warning: "fa-exclamation-triangle",
            danger: "fa-times-circle"
        };
        const cssClass = alertClassMap[type] || "alert-primary";
        const icon = iconMap[type] || "fa-thumbs-up";
    
        clearTimeout(setTimeoutVar);
        $(".alert").removeClass("alert-success alert-info alert-warning alert-danger alert-primary").fadeIn();
        $(".alert").addClass(cssClass);
        $(".notificationIcon").addClass(icon);
        $(".notificationText").html(message);
    
        setTimeoutVar = setTimeout(() => {
            $(".alert").fadeOut();
            $(".alert").removeClass(cssClass);
            $(".notificationIcon").removeClass(icon);
        }, 5000);
    }
        
    

    function fetchProperties(developerId="") {
        const developerIdParam = developerId ? `&developerId=${developerId}` : '';
        $.ajax({
            url: `/properties/data?page=${currentPage}&limit=${pageSize}&search=${encodeURIComponent(searchQuery)}&sortBy=${sortBy}&sortOrder=${sortOrder}${developerIdParam}`,
            method: "GET",
            xhrFields: { withCredentials: true },
            success: function (res) {
                const tbody = $('#representative-list tbody').empty();
                if (res.data.length === 0 || developerId === "") {
                    tbody.append('<tr><td colspan="6" class="text-center">No data found</td></tr>');
                } else {
                    res.data.forEach(item => {
                        console.log(item.isPublish);
                        tbody.append(`
                            <tr>
                                <td class="product-list-img"><img src="${item.image ||  'public/assets/images/propert_placeholder.jpg'} " 
                                    class="img-fluid avatar-md rounded" alt="img" 
                                    onerror="this.onerror=null;this.src='public/assets/images/propert_placeholder.jpg'"
                                    ></td>
                                <td><h6 class="mt-0 mb-1">${item.name}</h6></td>
                                <td>${item.address || ''}</td>
                                <td><span class="badge font-size-14 text-capitalize ${item.isPublish == 1 ? 'bg-success' : 'bg-danger'}">${item.isPublish == 1 ? 'publish' : 'inactive'}</span></td>
                                <td>${item.action}</td>
                            </tr>
                        `);
                    });
                }
                if(res.data.length > 0 && developerId != ""){
                    renderPagination(res.totalPages, res.currentPage);
                    togglePagination(res.totalRecords);
        
                    const start = (res.currentPage - 1) * pageSize + 1;
                    const end = Math.min(start + res.data.length - 1, res.totalRecords);
                    $('#entriesInfo').text(`Showing ${start} to ${end} of ${res.totalRecords} entries`);
                }
                else{
                    renderPagination(0, 1);
                    togglePagination(0);
        
                    const start = (1 - 1) * pageSize + 1;
                    const end = Math.min(start + 0 - 1, 0);
                    $('#entriesInfo').text(``);
                }
            },
            error: function (xhr) {
                if (xhr.status === 401) {
                    showNotification("danger", "Token is expired or missing");
                    window.location.href = "/";
                } else {
                    showNotification("danger", "Failed to load properties.");
                }
            }
        });
    }
    
    function renderPagination(totalPages, current) {
        let html = '';

        if (totalPages <= 1) {
            // No pagination needed
            $('#pagination').html('');
            return;
        }

        if (current > 1) {
            html += `<button class="btn btn-sm btn-outline-primary mx-1" data-page="${current - 1}">Prev</button>`;
        }

        if (totalPages <= 7) {
            // Show all pages if total is small
            for (let i = 1; i <= totalPages; i++) {
                html += `<button class="btn btn-sm ${i === current ? 'btn-primary' : 'btn-outline-primary'} mx-1" data-page="${i}">${i}</button>`;
            }
        } else {
            // Large pagination with ellipses
            html += `<button class="btn btn-sm ${current === 1 ? 'btn-primary' : 'btn-outline-primary'} mx-1" data-page="1">1</button>`;

            if (current > 4) {
                html += `<span class="mx-1">...</span>`;
            }

            let start = Math.max(2, current - 1);
            let end = Math.min(totalPages - 1, current + 1);

            for (let i = start; i <= end; i++) {
                html += `<button class="btn btn-sm ${i === current ? 'btn-primary' : 'btn-outline-primary'} mx-1" data-page="${i}">${i}</button>`;
            }

            if (current < totalPages - 3) {
                html += `<span class="mx-1">...</span>`;
            }

            html += `<button class="btn btn-sm ${current === totalPages ? 'btn-primary' : 'btn-outline-primary'} mx-1" data-page="${totalPages}">${totalPages}</button>`;
        }

        if (current < totalPages) {
            html += `<button class="btn btn-sm btn-outline-primary mx-1" data-page="${current + 1}">Next</button>`;
        }

        $('#pagination').html(html);
    }

    function togglePagination(total) {
        $('#pagination').toggle(total > pageSize);
    }
    
    function getStateFromURL() {
        const params = new URLSearchParams(window.location.search);
        return {
            page: parseInt(params.get('page')) || 1,
            limit: parseInt(params.get('limit')) || 10,
            search: params.get('search') || '',
            developerId: params.get('developerId') || developerInitialId
        };
    }

    function updateURLParams() {
        const params = new URLSearchParams();
        params.set('page', currentPage);
        params.set('limit', pageSize);
        if (searchQuery) params.set('search', searchQuery);
        if (selectedDeveloperId) params.set('developerId', selectedDeveloperId);

        const newUrl = `${window.location.pathname}?${params.toString()}`;
        window.history.replaceState({}, '', newUrl);
    }

    $(document).ready(function () {
        fetchProperties(developerInitialId);
        const state = getStateFromURL();
        currentPage = state.page;
        pageSize = state.limit;
        searchQuery = state.search;
        selectedDeveloperId = state.developerId;

        // Pre-populate inputs
        $('#pageSize').val(pageSize);
        $('#searchInput').val(searchQuery);
        $('#developer-select').val(selectedDeveloperId).trigger('change.select2');

        fetchProperties(selectedDeveloperId);
    
        // Pagination click
        $('#pagination').on('click', 'button', function () {
            currentPage = parseInt($(this).data('page'));
            updateURLParams();
            fetchProperties(selectedDeveloperId);
        });
    
        // Page size
        $('#pageSize').on('change', function () {
            pageSize = parseInt($(this).val());
            currentPage = 1;
            updateURLParams();
            fetchProperties(selectedDeveloperId);
        });
    
        // Search
        $('#searchInput').on('input', function () {
            searchQuery = $(this).val();
            currentPage = 1;
            updateURLParams();
            fetchProperties(selectedDeveloperId);
        });
    
        // Optional: column sort (add class 'sortable' and data-sort="field")
        $('.sort').on('click', function () {
            const field = $(this).data('sort');
            if (sortBy === field) {
                sortOrder = sortOrder === "asc" ? "desc" : "asc";
            } else {
                sortBy = field;
                sortOrder = "asc";
            }
            currentPage = 1;
            updateURLParams();
            fetchProperties(selectedDeveloperId);
        });
    });
    
    $(document).on('click', '.building-delete', function (event) {
        event.preventDefault(); // prevent default link behavior

        const propertyId = $(this).data('id'); // get the specific property ID

        Swal.fire({
            title: "Are you sure?",
            text: "You won't be able to revert back!",
            showCancelButton: true,
            confirmButtonColor: "#4ac18e",
            cancelButtonColor: "#f46a6a",
            confirmButtonText: "Yes, delete it!"
        }).then(function (result) {
            if (result.value) {
                $.ajax({
                    url: `/deleteProperty/${propertyId}`,
                    method: "DELETE",
                    success: function (res) {
                        if (res.status === true) {
                            Swal.fire("Deleted!", "Property deleted successfully.", "success");
                            window.location.href = '/developers-building-lists';
                            // Optionally call fetchDevelopers(); if you want to reload without redirect
                        } else {
                            Swal.fire("Deleted!", res.message || "An error occurred. Please try again.", "error");

                            //showNotification("error", res.message || "An error occurred. Please try again.");
                        }
                    },
                    error: function (xhr) {
                        if (xhr.status === 401) {
                            //showNotification('error', 'Token is expired or missing');
                            Swal.fire("", "Token is expired or missing.", "error");

                            window.location.href = '/login';
                        } else {
                            //showNotification('error', xhr.responseJSON?.message || 'An error occurred. Please try again.');
                            Swal.fire("Deleted!", xhr.responseJSON?.message || 'An error occurred. Please try again.', "error");

                        }
                    }
                });
            }
        });
    });
    
    </script>
    