<%- contentFor('HeaderCss') %>
  <link href="public/assets/libs/sweetalert2/sweetalert2.min.css" rel="stylesheet" type="text/css">
 <style>
  .upload-drop-zone {
    border: 2px dashed #ccc;
    padding: 40px;
    text-align: center;
    border-radius: 6px;
    cursor: pointer;
    transition: 0.2s;
  }

  .upload-drop-zone.dragover {
    background-color: #f0f0f0;
    border-color: #333;
  }

  .file-item {
    display: flex;
    align-items: center;
    justify-content: space-between;
    background: #f9f9f9;
    border: 1px solid #ddd;
    margin-top: 10px;
    padding: 10px;
    border-radius: 4px;
  }

  .file-item .file-name {
  white-space: normal; /* allow line breaks */
  word-break: break-word; /* wrap long words if needed */
}

  .file-item .file-size {
    color: gray;
    font-size: 0.85rem;
    margin-left: 10px;
  }

  .file-item .delete-btn {
    cursor: pointer;
    color: red;
  }

  .upload-area {
      border: 2px dashed #999;
      padding: 20px;
      text-align: center;
      cursor: pointer;
      margin-bottom: 20px;
    }
    .preview-container {
      display: flex;
      flex-wrap: wrap;
      gap: 15px;
    }
    .preview-box {
      position: relative;
      width: 150px;
      height: 150px;
      border: 1px solid #ccc;
    }
    .preview-box img {
      width: 100%;
      height: 100%;
      object-fit: cover;
    }
    .remove-btn {
      position: absolute;
      top: 5px;
      right: 5px;
      background: red;
      color: white;
      border: none;
      border-radius: 50%;
      cursor: pointer;
      width: 25px;
      height: 25px;
      font-size: 16px;
    }

</style>
    <!-- Plugins css -->
    <link href="public/assets/libs/dropzone/min/dropzone.min.css" rel="stylesheet" type="text/css">

<%- contentFor('breadcrumb') %>

<%- contentFor('body') %>
              
    <div class="row mb-4">
      <div class="col-sm-6">
          <!-- <h4 class="fw-normal">Building Id #60735 <span class="badge bg-success ms-2 bg-opacity-25">Published</span></h4> -->
      </div> 
      <div class="col-sm-6 text-end">
          <a class="btn btn-blue-grey text-end" href="/developer-project">Back</a>
      </div>
    </div>
    <div class="row">
        <div class="col-12">
            <div class="card">
                <div class="card-body">
                  <h4 class="card-title mb-3">Upload Floor Plan Images</h4>
                    <!-- Drop Area -->
                    <div class="upload-drop-zone mb-3 d-flex align-items-center flex-column position-relative" id="dropZone">
                        <div class="mb-3">
                            <i class="mdi mdi-cloud-upload display-4 text-muted"></i>
                        </div>
                        <h4>Drop files here or click to upload.</h4>
                        <p>Select Images (Only 1024x1024 allowed)</p>
                        <input type="file" id="images" name="images" multiple  hidden>
                        <button class="btn btn-link mt-4 text-secondary stretched-link border-0" id="browseBtn">Browse for file</button>
                    </div>
                    
                    <div class="preview-container gap-2" id="previewContainer"></div>

                    <div class="d-flex justify-content-center mt-4">
                      <button type="button" class="btn btn-success" id="uploadBtn">Upload Images</button>
                  </div>
                    <!-- File List -->

                    <!-- Hidden Form -->
                    <form id="uploadForm" enctype="multipart/form-data">
                      <input type="hidden" name="building_id" name="building_id" value="<%= property?.id %>" />
                    </form>
                </div>
              </div>
        </div>

      <div class="card border border-top-0">
        <div class="card-body">
            <!-- design changes -->
            <div class="card">
              <div class="card-body">
                <div class="row mb-3 align-items-center">
                    <div class="col-md-6">
                        <h4 class="card-title">Building Floor Plans List</h4>
                    </div>
                    <div class="col-md-6 text-end">
                        <button type="button" class="btn btn-info" id="publish">Publish</button>
                        <button type="button" class="btn btn-warning" id="unpublish">Unpublish</button>  
                        <button type="button" class="btn btn-danger" id="deleteSelectedBtn">Delete</button>  
                    </div>
                </div>
                <div class="table-wrapper">
                    <table id="orulo-table" class="data-table table table-striped table-centered dt-responsive table-vertical" style="border-collapse: collapse; border-spacing: 0; width: 100%;">
                        <thead>
                            <tr>
                                <th class="no-sort">
                                    <div class="form-check">
                                        <input type="checkbox" value="" class="form-check-input select-all" />
                                    </div>
                                </th>
                                <th>Floor Images</th>
                                <th>Title</th>
                                <th>Description</th>
                                <th>Status</th>
                                <th>Action</th>
                            </tr>
                        </thead>
                        <tbody id="fileList">
                        </tbody>
                    </table>
                </div>
                
              </div>
            </div>
            <div class="row">
                <div class="col-md-12 text-end">
                    <div id="pagination"></div>
                </div>
              </div>
        </div> <!-- end col -->
    </div> <!-- end row -->

    <!-- Modal -->
    <div class="modal fade" id="editImageModal" tabindex="-1" aria-labelledby="editImageModalLabel" aria-hidden="true">
      <div class="modal-dialog modal-sm">
        <div class="modal-content">
          <div class="modal-header">
            <h5 class="modal-title" id="editImageModalLabel">Edit Floor Plans Image Info</h5>
            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
          </div>
          <div class="modal-body">
            <form id="editImageForm">
              <input type="hidden" id="editImageId" />
              <div class="mb-3">
                <label for="imageTitle" class="form-label">Title</label>
                <input type="text" class="form-control" id="imageTitle" required />
              </div>
              <div class="mb-3">
                <label for="imageDescription" class="form-label">Description</label>
                <textarea class="form-control" id="imageDescription" required></textarea>
              </div>
              <div class="text-end">
                <button type="submit" class="btn btn-primary btn-sm">Update</button>
              </div>
            </form>
          </div>
        </div>
      </div>
    </div>

  <%- contentFor('FooterJs') %>
  <!-- Plugins js -->
  <script src="public/assets/libs/dropzone/min/dropzone.min.js"></script>
    <!-- Sweet Alerts js -->
    <script src="public/assets/libs/sweetalert2/sweetalert2.min.js"></script>

<%- contentFor('BottomJs') %>

<script>
  document.getElementById('backBtn').addEventListener('click', function () {
      const params = new URLSearchParams(window.location.search);
      params.delete('propertyId'); // Remove propertyId
      const newQueryString = params.toString();
      params.size === 0 ? window.location.href = `/developer-project` : window.location.href = `/developer-project?${newQueryString}`;
  });
</script>
<script>
  $(document).ready(function () {
    const dropZone = $('#dropZone');
    const fileInput = $('#images');
    const fileList = $('#fileList');
    const pagination = $('#pagination');
    const buildingId = '<%= property?.id %>';
    console.log(buildingId);
    let selectedFiles = [];

    // Handle 'Select All' checkbox click
    $(document).on('change', '.select-all', function () {
        let isChecked = $(this).is(':checked');
        $('.row-select').prop('checked', isChecked);
    });

    // Update 'Select All' checkbox based on individual row checkbox changes
    $(document).on('change', '.row-select', function () {
        let total = $('.row-select').length;
        let checked = $('.row-select:checked').length;
        $('.select-all').prop('checked', total === checked);
    });


    // $('#uploadArea').on('click', () => {
    //   $('#imageInput').click();
    // });

    // $('#uploadArea').on('dragover', function (e) {
    //   e.preventDefault();
    //   $(this).css('background', '#f0f0f0');
    // });

    // $('#uploadArea').on('dragleave', function (e) {
    //   e.preventDefault();
    //   $(this).css('background', '');
    // });

    // $('#uploadArea').on('drop', function (e) {
    //   e.preventDefault();
    //   $(this).css('background', '');
    //   handleFiles(e.originalEvent.dataTransfer.files);
    // });

    // $('#imageInput').on('change', function () {
    //   handleFiles(this.files);
    // });
    $('#uploadArea').on('dragover', function (e) {
  e.preventDefault();
  $(this).addClass('dragover');
});

$('#uploadArea').on('dragleave', function (e) {
  e.preventDefault();
  $(this).removeClass('dragover');
});

$('#uploadArea').on('drop', function (e) {
  e.preventDefault();
  $(this).removeClass('dragover');
  const files = e.originalEvent.dataTransfer.files;
  processAndPreviewFiles(files);
});

function processAndPreviewFiles(files) {
  for (let file of files) {
    if (!file.type.startsWith('image/')) continue;

    const fileExists = selectedFiles.find(f => f.name === file.name && f.size === file.size);
    if (fileExists) continue;

    selectedFiles.push(file);

    const reader = new FileReader();
    reader.onload = function (e) {
      const imgHtml = `
        <div class="preview-box" data-name="${file.name}">
          <img src="${e.target.result}"  alt="preview image" style="width: 100%; height: 100%; object-fit: cover;">
          <button class="remove-btn" title="Remove">&times;</button>
        

        </div>
        
      `;
      $('#previewContainer').append(imgHtml);
    };
    reader.readAsDataURL(file);
  }

  updateUploadButtonLabel();
}



    function handleFiles(files) {
      for (let file of files) {
        if (!file.type.startsWith('image/')) continue;

        selectedFiles.push(file);
        const reader = new FileReader();
        reader.onload = function (e) {
          const imgHtml = `
                   <div class="row">
            <div class="col-md-12">
            <div class="preview-box" data-name="${file.name}">
              <img src="${e.target.result}" alt="">
              <button class="remove-btn" title="Remove">&times;</button>
            </div>
            </div>
            <div class="col-md-12">
                <div class="mb-3">
                    <label class="form-label" for="developerName">Add image description</label>
                    <input id="description" name="description" type="text" class="form-control" placeholder="Enter description">
                </div>
            </div>
            </div>
          `;
          $('#previewContainer').append(imgHtml);
        };
        reader.readAsDataURL(file);
      }
    }

    // Delete image preview and remove file from selectedFiles
    // $('#previewContainer').on('click', '.remove-btn', function () {
    //   const parentBox = $(this).closest('.row');
    //   const fileName = parentBox.data('name');
    //   selectedFiles = selectedFiles.filter(f => f.name !== fileName);
    //   parentBox.remove();
    //   //$(`.file-item[data-name="${fileName}"]`).remove();
    //   updateUploadButtonLabel();
    // });

    $("#previewContainer").on("click", ".remove-btn", function () {
      const wrapper = $(this).closest(".image-wrapper");
      const fileName = wrapper.attr("data-name");

      // Remove file from selectedFiles
      selectedFiles = selectedFiles.filter(f => f.name !== fileName);

      // Remove entire preview + description
      wrapper.remove();

      updateUploadButtonLabel();
    });

    // Load paginated existing images
    function loadExistingImages(page = 1) {
      $.get(`/list-floor-images/${buildingId}?page=${page}`, function (res) {
        if (res.success && Array.isArray(res.images)) {
          fileList.empty(); // Clear previews
          res.images.forEach(img => appendImageItem(img));

          if (res.totalPages > 1) {
            renderPagination(res.totalPages, page);
          } else {
            pagination.empty();
          }
        }
      });
    }

    // Render pagination outside fileList
    function renderPagination(total, current) {
      let html = '<nav><ul class="pagination">';
      for (let i = 1; i <= total; i++) {
        html += `<li class="page-item ${i === current ? 'active' : ''}">
          <a class="page-link" href="#" data-page="${i}">${i}</a></li>`;
      }
      html += '</ul></nav>';
      pagination.html(html);
    }

    pagination.on('click', '.page-link', function (e) {
      e.preventDefault();
      const page = parseInt($(this).data('page'));
      loadExistingImages(page);
    });

    function appendImageItem(image) {
      const thumbUrl = image["1024x1024"] || image["520x280"];
      const isChecked = image.status === 'enabled' ? 'checked' : '';

      const item = $(
        `
       <tr>
                                    <td>
                                        <div class="form-check">
                                            <input type="checkbox" class="status-checkbox form-check-input row-select" data-id="${image._id}"/>
                                        </div>
                                    </td>
                                    <td class="product-list-img">
                                        <img src="${thumbUrl || 'public/assets/images/placeholder-img.webp'}" class="img-fluid avatar-md rounded" alt="${image.description}" onerror="this.onerror=null;this.src='public/assets/images/placeholder-img.webp'">
                                    </td>
                                     <td>
                                        <h6 class="mt-0 mb-1">${image.title || 'No title'}</h6>
                                    </td>
                                    <td>
                                        <h6 class="mt-0 mb-1">${image.description || 'No description'}</h6>
                                    </td>
                                    <td> <span class="badge font-size-14 text-capitalize ${image.status === "enabled" ? 'bg-success' : 'bg-danger'}">${
                                            image.status === "enabled" ? "Publish" : "Inactive"
                                          }</span>
                                    </td>
                                     <td>
                                        <div class="text-center">
                                            <button type="button"
                                              class="btn btn-primary btn-sm edit-image-btn"
                                              data-id="${image._id}"
                                              data-title="${image.title || ''}"
                                              data-description="${image.description || ''}"
                                              data-bs-toggle="modal"
                                              data-bs-target="#editImageModal">
                                              Edit
                                            </button>
                                        </div>
                                    </td>
                                </tr>
      
      
      
      
      `);
      fileList.append(item);
    }

    dropZone.on('dragover', function (e) {
      e.preventDefault();
      dropZone.addClass('dragover');
    });

    dropZone.on('dragleave', function () {
      dropZone.removeClass('dragover');
    });

    dropZone.on('drop', function (e) {
      e.preventDefault();
      dropZone.removeClass('dragover');
      const files = e.originalEvent.dataTransfer.files;
      processAndPreviewFiles(files);
    });

    $('#browseBtn').click(() => fileInput.click());

    fileInput.on('change', function () {
      processAndPreviewFiles(this.files);
      fileInput.val('');
    });

    function processAndPreviewFiles(files) {
  for (let i = 0; i < files.length; i++) {
    const file = files[i];
    if (!file.type.startsWith('image/')) continue;

    const reader = new FileReader();
    reader.onload = function (e) {
      const img = new Image();
      img.onload = function () {
        //if (img.width === 1024 && img.height === 1024) {
          selectedFiles.push(file);

         const previewHtml = `
                <div class="image-wrapper row mb-3" data-name="${file.name}">
                  <div class="col-md-12">
                  <div class="preview-box" >
                    <img src="${e.target.result}" alt="">
                    <button class="remove-btn" title="Remove">&times;</button>
                  </div>
                  </div>
                  <div class="col-md-12">
                      <div class="mb-3">
                          <label class="form-label" for="developerName">Add image description</label>
                          <input id="description" name="description" type="text" class="form-control desc-input" placeholder="Enter description">
                      </div>
                  </div>
                  </div>

                `;
          $('#previewContainer').append(previewHtml);
          updateUploadButtonLabel();
        // } else {
        //    Swal.fire("", `${file.name} - Invalid size (${img.width}x${img.height})`, "error");
        //   updateUploadButtonLabel();
        // }
        // selectedFiles.push(file);

        //   const previewHtml = `
        //     <div class="preview-box" data-name="${file.name}">
        //       <img src="${e.target.result}" alt="">
        //       <button class="remove-btn" title="Remove">&times;</button>
        //     </div>
        //   `;
        //   $('#previewContainer').append(previewHtml);
        //   //$('#fileList').prepend(`<div class="file-item text-success" data-name="${file.name}">${file.name} - Ready to upload</div>`);
        //   updateUploadButtonLabel();

      };
      img.src = e.target.result;
    };
    reader.readAsDataURL(file);
  }
}

    // Append the Upload button after fileList
    function updateUploadButtonLabel() {
        const count = selectedFiles.length;
        $("#uploadBtn").text(`Upload Images (${count})`);
    }

    $('#uploadBtn').on('click', function () {
      if (selectedFiles.length === 0) {
         Swal.fire("", "No valid images to upload.", "error");
        return;
      }

      // const description = $('#description').val().trim();

      // if(!description){
      //   alert('Description is required.');
      //   return;
      // }

      const formData = new FormData();
      formData.append('buildingId', buildingId);
      // formData.append('description',description);
      // selectedFiles.forEach(f => formData.append('images', f));
     let hasMissingDescription = false;

      selectedFiles.forEach((file, index) => {
        formData.append("images", file);

        const descInput = $(".desc-input").eq(index);
        const desc = descInput.val() || '';

        if (!desc) {
          hasMissingDescription = true;
        }

        formData.append("descriptions[]", desc);
      });

      // if (hasMissingDescription) {
      //   Swal.fire("", "Each image must have a description.", "error");
      //   return;
      // }

      $('#status').fadeIn();
      $('#preloader').fadeIn('slow');
                
      $('#uploadBtn').prop('disabled', true);

      $.ajax({
        url: '/upload-property-floor-image',
        type: 'POST',
        data: formData,
        contentType: false,
        processData: false,
        success: function (res) {
          if (res.success && Array.isArray(res.images)) {
            $('#fileList').html('');
            $("#previewContainer").empty();
            selectedFiles.length = 0;
            updateUploadButtonLabel();
            res.images.forEach(img => appendImageItem(img));
            loadExistingImages(); // Reload pagination view
          } else {
            //alert('Upload failed.');
            Swal.fire("", res.message, "error");
          }
        },
        error: function (xhr) {
            if (xhr.status === 401) {
              Swal.fire("", "Token is expired or missing", "error");
              window.location.href = "/login";
            } else {
              Swal.fire(
                "",
                xhr.responseJSON.message || "An error occurred. Please try again.",
                "error"
              );
            }
          },
        complete: function () {
                    // always re-enable
                    // $('#overlayLoader').fadeOut();
                    $('#status').fadeOut();
                    $('#preloader').fadeOut('slow');
                    $('#uploadBtn').prop('disabled', false); 
           }
      });
    });



    $('#updateStatusBtn').on('click', function () {
  const updates = [];

  $('.status-checkbox').each(function () {
    const id = $(this).data('id');
    const status = $(this).is(':checked') ? 'enabled' : 'disabled';
    updates.push({ id, status });
  });

  $.ajax({
    url: '/update-floor-image-status',
    type: 'PUT',
    contentType: 'application/json',
    data: JSON.stringify({
      building_id: buildingId, // replace with actual value
      updates
    }),
    success: function (res) {
      alert(res.message);
      loadExistingImages(); // Refresh the view
    },
    error: function () {
      alert('Failed to update image statuses.');
    }
  });
});

$("#publish, #unpublish").on("click", function () {
        const isPublish = $(this).attr("id") === "publish";
        const newStatus = isPublish ? "enabled" : "disabled";
        const updates = [];

        $(".status-checkbox:checked").each(function () {
          const id = $(this).data("id");
          updates.push({ id, status: newStatus });
        });

        if (updates.length === 0) {
        Swal.fire("", "Please select at least one image.", "warning");
        return;
      }

        $.ajax({
          url: "/update-floor-image-status",
          type: "PUT",
          contentType: "application/json",
          data: JSON.stringify({
            building_id: buildingId, // make sure this is defined in your scope
            updates,
          }),
          success: function (res) {
            if (res.success == true) {
              Swal.fire("", res.message, "success");
              loadExistingImages(); // Refresh the view
            } else {
              Swal.fire("", res.message, "error");
            }
          },
          error: function (xhr) {
            if (xhr.status === 401) {
              Swal.fire("", "Token is expired or missing", "error");
              window.location.href = "/login";
            } else {
              Swal.fire(
                "",
                xhr.responseJSON.message || "An error occurred. Please try again.",
                "error"
              );
            }
          },
        });
      });


    $("#deleteSelectedBtn").on("click", function () {
        const selectedIds = [];

        $(".status-checkbox:checked").each(function () {
          selectedIds.push($(this).data("id"));
        });

        if (selectedIds.length === 0) {
          Swal.fire("", "Please select at least one image to delete.", "warning");
          return;
        }

        Swal.fire({
          title: "Are you sure?",
          text: `You are about to delete ${selectedIds.length} floor plans image(s). You won't be able to revert back!.`,
          icon: "warning",
          showCancelButton: true,
          confirmButtonColor: "#4ac18e",
          cancelButtonColor: "#f46a6a",
          confirmButtonText: "Yes, delete them!"
        }).then(function (result) {
          if (result.isConfirmed) {
            $.ajax({
              url: `/delete-multiple-floor-images`,
              type: "DELETE",
              contentType: "application/json",
              data: JSON.stringify({ imageIds: selectedIds }),
              success: function (res) {
                if (res.success) {
                  Swal.fire("", res.message, "success");
                  loadExistingImages(); // refresh view
                } else {
                  Swal.fire("", res.message || "Delete failed.", "error");
                }
              },
              error: function (xhr) {
                Swal.fire("", xhr.responseJSON?.message || "An error occurred.", "error");
              }
            });
          }
        });
      });




    fileList.on('click', '.delete-btn', function () {
       Swal.fire({
                title: "Are you sure?",
                text: "You won't be able to revert back!",
                icon: "warning",
                showCancelButton: true,
                confirmButtonColor: "#4ac18e",
                cancelButtonColor: "#f46a6a",
                confirmButtonText: "Yes, delete it!"
              }).then(function (result) {
                if (result.value) {
      const id = $(".delete-btn").data('id');
      console.log(id);
      const item = $(".delete-btn").closest('.file-item');

      
        $.ajax({
          url: `/delete-property-floor-image/${id}`,
          type: 'DELETE',
          success: function (res) {
            if (res.success) {
              item.remove();
              loadExistingImages(); // Refresh after delete
            } else {
              alert('Delete failed.');
            }
          },
          error: function () {
            alert('Error deleting image.');
          }
        });
      }
    });

  });

  $(document).on("click", ".edit-image-btn", function () {
      const imageId = $(this).data("id");
      const title = $(this).data("title");
      const description = $(this).data("description");

      $("#editImageId").val(imageId);
      $("#imageTitle").val(title);
      $("#imageDescription").val(description);
  });

   $("#editImageForm").submit(function (e) {
      e.preventDefault();

      const imageId = $("#editImageId").val().trim();
      const title = $("#imageTitle").val().trim();
      const description = $("#imageDescription").val().trim();
      const building_id = buildingId;

      if (!title || !description) {
        Swal.fire("Error", "Both Title and Description are required.", "error");
        return;
      }

      $.ajax({
        url: "/updateImageFloorInfo", // Replace with your actual API route
        method: "POST",
        contentType: "application/json",
        data: JSON.stringify({
          buildingId:building_id,
          imageId,
          title,
          description
        }),
        success: function (response) {
          if (response.success == true) {
            Swal.fire("Success", "Image info updated!", "success");

            // Close modal
            const modalEl = document.getElementById("editImageModal");
            const modal = bootstrap.Modal.getInstance(modalEl);
            modal.hide();

            // Reload images (optional: keep on current page)
            loadExistingImages();
          } else {
            Swal.fire("Error", response.message || "Update failed.", "error");
          }
        },
        error: function (xhr) {
              if (xhr.status === 401) {
                //showNotification('error', 'Token is expired or missing');
                Swal.fire("", "Token is expired or missing", "error");

                window.location.href = "/login";
              } else {
                //showNotification('error', xhr.responseJSON.message || 'An error occurred. Please try again.');
                Swal.fire(
                  "",
                  xhr.responseJSON.message ||
                    "An error occurred. Please try again.",
                  "error"
                );
              }
              //$(".loader").fadeOut();
        },
      });
    });
  
    // Initial load
    loadExistingImages();
  });

 
</script>

  