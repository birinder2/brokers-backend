<%- contentFor('HeaderCss') %>
    <!-- DataTables -->
    <link href="public/assets/libs/datatables.net-bs4/css/dataTables.bootstrap4.min.css" rel="stylesheet" type="text/css" />
    <link href="public/assets/libs/datatables.net-responsive-bs4/css/responsive.bootstrap4.min.css" rel="stylesheet" type="text/css" />
    <link href="public/assets/libs/sweetalert2/sweetalert2.min.css" rel="stylesheet" type="text/css" />

<%- contentFor('breadcrumb') %>

<%- contentFor('body') %>

    <div class="row">
        <div class="col-12">
            <div class="card">
              <div class="card-body">
                  <div class="text-end">
                    <!-- <a href="/addBroker" class="btn btn-primary">Add New Broker</a> -->
                  </div>
                  <div class="row my-3 justify-content-between align-items-center pb-3">
                    <div class="col-md-3">
                      <select id="pageSize" class="form-select" style="width: 100px;">
                        <option value="2">2</option>
                        <option value="10" selected>10</option>
                        <option value="25">25</option>
                        <option value="50">50</option>
                      </select>
                    </div>
                    <div class="col-md-3">
                      <input type="text" id="searchInput" class="form-control" placeholder="Search..." />
                    </div>
                  </div>
                  <table id="broker-list" class="table table-striped table-centered dt-responsive nowrap table-vertical" style="border-collapse: collapse; border-spacing: 0; width: 100%">
                    <thead>
                      <tr>
                        <th>Broker Name</th>
                        <th>Email</th>
                        <th>Phone</th>
                        <th>Profile Image</th>
                        <th>Slot Duration</th>
                        <th>Status</th>
                        <th>Action</th>
                      </tr>
                    </thead>
                    <tbody></tbody>
                  </table>
                  <div class="d-flex justify-content-between align-items-center mt-4">
                    <div id="entriesInfo" class="text-muted small">
                      Showing 0 to 0 of 0 entries
                    </div>
                    <!-- Pagination -->
                    <div id="pagination" class="text-end mt-4"></div>
                  </div>
              </div>
            </div>
          </div>
    </div>

    <!--  Modal content for the above example -->
    <div class="modal fade bs-example-modal-lg" tabindex="-1" id="changePasswordModal" aria-labelledby="changePasswordModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title mt-0" id="changePasswordModalLabel">Change Password</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <form id="changePasswordForm">
                        <div class="form-group mb-3">
                            <label class="form-label">Email</label>
                            <div class="input-group">
                                <input
                                    type="email"
                                    id="email"
                                    class="form-control"
                                    aria-label="name"
                                    aria-describedby="basic-addon2"
                                    required
                                    autocomplete="off"
                                    placeholder="Enter your email"
                                />
                            </div>
                        </div>
                        <div class="form-group mb-3">
                            <label class="form-label">New Password</label>
                            <input
                                type="password"
                                id="newPassword"
                                required
                                autocomplete="new-password"
                                class="form-control"
                                aria-label="name"
                                aria-describedby="basic-addon2"
                                placeholder="Enter new password"
                            />
                            <div class="text-danger error-msg" id="newPasswordError"></div>

                        </div>
                        <div class="form-group">
                            <label class="form-label">Confirm New Password</label>
                            <input
                                type="password"
                                id="confirmPassword"
                                required
                                class="form-control"
                                autocomplete="new-password"
                                aria-label="name"
                                aria-describedby="basic-addon2"
                                placeholder="Confirm new password"
                            />
                            <div class="text-danger error-msg" id="confirmPasswordError"></div>
                        </div>
                        <div class="mt-3">
                            <button type="submit" class="btn btn-success">
                                Update Password
                            </button>
                            <!-- <button type="button" class="btn btn-primary" onclick="closeChangePassword()">
                                Cancel
                            </button> -->
                        </div>
                    </form>
                </div>
            </div><!-- /.modal-content -->
        </div><!-- /.modal-dialog -->
    </div><!-- /.modal -->


    <!-- Change Password Modal -->
    <!-- <div id="changePasswordModal" style=" display: none; position: fixed; top: 20%; left: 40%; background: white; padding: 20px; border-radius: 8px; box-shadow: 0 0 10px #000;" >
        <h2>Change Password</h2>
        <form id="changePasswordForm">
        <div class="form-group">
            <label class="form-label">Email</label><br />
            <div class="input-group mb-3">
            <input
                type="email"
                id="email"
                class="form-control"
                aria-label="name"
                aria-describedby="basic-addon2"
                required
                autocomplete="off"
                placeholder="Enter your email"
            />
            </div>
        </div>
        <div>
            <div class="form-group">
            <label class="form-label">New Password</label><br />
            <input
                type="password"
                id="newPassword"
                required
                autocomplete="new-password"
                class="form-control"
                aria-label="name"
                aria-describedby="basic-addon2"
                placeholder="Enter new password"
            />
            </div>
        </div>
        <div>
            <div class="form-group">
            <label class="form-label">Confirm New Password</label
            ><br />
            <input
                type="password"
                id="confirmPassword"
                required
                class="form-control"
                aria-label="name"
                aria-describedby="basic-addon2"
                placeholder="Confirm new password"
            />
            </div>
        </div>
        <br />
        <button type="submit" class="btn btn-primary btn-sm">
            Update Password
        </button>
        <button
            type="button"
            class="btn btn-primary btn-sm"
            onclick="closeChangePassword()"
        >
            Cancel
        </button>
        </form>
  </div> -->

<%- contentFor('FooterJs') %>
    <script src="public/assets/libs/datatables.net/js/jquery.dataTables.min.js"></script>
    <script src="public/assets/libs/datatables.net-bs4/js/dataTables.bootstrap4.min.js"></script>
    <script src="public/assets/libs/datatables.net-responsive/js/dataTables.responsive.min.js"></script>
    <script src="public/assets/libs/datatables.net-responsive-bs4/js/responsive.bootstrap4.min.js"></script>
    <script src="public/assets/libs/sweetalert2/sweetalert2.min.js"></script>
    <!-- Ecommerce init js -->
    <script src="public/assets/js/pages/ecommerce.init.js"></script>
    <script src="https://code.jquery.com/ui/1.13.2/jquery-ui.min.js"></script>

    <script>
        let currentPage = 1;
        let pageSize = 10;
        let searchQuery = "";
        let sortField = "";
        let sortOrder = "";
        var setTimeoutVar;
        function showNotification(type, message) {
          Swal.fire({
            toast: true,
            position: "top-end",
            icon: type,
            title: message,
            showConfirmButton: false,
            timer: 3000,
            timerProgressBar: true,
          });
        }
        
        function fetchBrokers() {
          const queryParams = new URLSearchParams(window.location.search);
          const newQueryString = queryParams.toString();
          const queryString = (queryParams.size === 0) ? `` : `&${newQueryString}`;
          //console.log('queryString - ',queryString);
          $.ajax({
            url: `/brokers/data?page=${currentPage}&limit=${pageSize}&search=${encodeURIComponent(searchQuery)}`,
            method: "GET",
            xhrFields: {
              withCredentials: true,
            },
            success: function (res) {
              const tbody = $("#broker-list tbody");
              tbody.empty();
      
              if (!res.data || res.data.length === 0) {
                tbody.append(
                  '<tr><td colspan="7" class="text-center">No brokers found</td></tr>'
                );
                $("#pagination").empty();
                return;
              }
      
              res.data.forEach((dev) => {
                tbody.append(`<tr>
                    <td><h6 class="mt-0 mb-1">${dev.name}</h6></td>
                    <td><h6 class="mt-0 mb-1">${dev.email}</h6></td>
                    <td>${dev.phoneCode} ${dev.phone}</td>
                    <td class="product-list-img">
                        ${
                            dev.image && dev.image !== "N/A"
                            ? dev.image.startsWith('http')
                            ? `<img src="${dev.image}" 
                              style="width:50px;height:50px;" class="img-fluid avatar-md rounded" alt="tbl"/>` : `<img src="public/uploads/brokers/${dev.image || 'public/assets/images/placeholder-img.webp'}" 
                              style="width:50px;height:50px;" class="img-fluid avatar-md rounded" alt="tbl" onerror="this.onerror=null;this.src='public/assets/images/placeholder-img.webp'"/>`
                            : "N/A"
                        }
                    </td>
                    <td>${dev.slot_duration}</td>
                    <td>
                        <span class="badge font-size-14 text-capitalize ${
                            dev.status === "inactive"
                            ? "bg-danger"
                            : "bg-success"
                        }">${dev.status}</span>
                    </td>
                    <td>
                        <div class="btn-group me-1 mt-2 dropstart">
                            <button class="btn btn-blue-grey btn-sm dropdown-toggle" type="button" data-bs-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                                <span>Action</span>
                                <i class="mdi mdi-chevron-down"></i>
                            </button>
                            <div class="dropdown-menu dropdown-menu-start">
                                <a class="dropdown-item" href="/editBroker?brokerId=${dev._id}${queryString}"><i class="mdi mdi-pencil font-size-18"></i> <span class="align-middle">Edit</span></a>
                                <button type="button" onclick="openChangePassword('${dev.email}')" class="dropdown-item" data-bs-toggle="modal" data-bs-target=".bs-example-modal-lg"> <i class="mdi mdi-lock font-size-18 align-middle"></i> <span class="align-middle">Change Password</span></button>
                                <a class="dropdown-item broker-delete" id="broker-delete" href="#" data-id="${dev._id}"><i class="mdi mdi-delete font-size-18"></i> <span class="align-middle">Delete</span></a>
                            </div>
                        </div>
                    </td>
                </tr>`);
              });
            //   <a class="dropdown-item" onclick="openChangePassword('${dev.email}')"><i class="mdi mdi-file-image font-size-18"></i> Change Password</a>
      
              renderPagination(res.totalPages, res.currentPage);
              togglePagination(res.totalRecords);
      
              const startEntry = (res.currentPage - 1) * pageSize + 1;
              const endEntry = Math.min(
                startEntry + res.data.length - 1,
                res.totalRecords
              );
      
              const infoText =
                res.totalRecords > 0
                  ? `Showing ${startEntry} to ${endEntry} of ${res.totalRecords} entries`
                  : "Showing 0 to 0 of 0 entries";
      
              $("#entriesInfo").text(infoText);
            },
            error: function (xhr) {
              if (xhr.status === 401) {
                showNotification("error", "Token is expired or missing");
                window.location.href = "/";
              } else {
                showNotification(
                  "error",
                  xhr.responseJSON.message || "An error occurred. Please try again."
                );
              }
              $(".loader").fadeOut();
            },
          });
        }

        function renderPagination(totalPages, current) {
            let html = '';
      
            if (totalPages <= 1) {
                // No pagination needed
                $('#pagination').html('');
                return;
            }
      
            if (current > 1) {
                html += `<button class="btn btn-sm btn-outline-primary mx-1" data-page="${current - 1}">Prev</button>`;
            }
      
            if (totalPages <= 7) {
                // Show all pages if total is small
                for (let i = 1; i <= totalPages; i++) {
                    html += `<button class="btn btn-sm ${i === current ? 'btn-primary' : 'btn-outline-primary'} mx-1" data-page="${i}">${i}</button>`;
                }
            } else {
                // Large pagination with ellipses
                html += `<button class="btn btn-sm ${current === 1 ? 'btn-primary' : 'btn-outline-primary'} mx-1" data-page="1">1</button>`;
      
                if (current > 4) {
                    html += `<span class="mx-1">...</span>`;
                }
      
                let start = Math.max(2, current - 1);
                let end = Math.min(totalPages - 1, current + 1);
      
                for (let i = start; i <= end; i++) {
                    html += `<button class="btn btn-sm ${i === current ? 'btn-primary' : 'btn-outline-primary'} mx-1" data-page="${i}">${i}</button>`;
                }
      
                if (current < totalPages - 3) {
                    html += `<span class="mx-1">...</span>`;
                }
      
                html += `<button class="btn btn-sm ${current === totalPages ? 'btn-primary' : 'btn-outline-primary'} mx-1" data-page="${totalPages}">${totalPages}</button>`;
            }
      
            if (current < totalPages) {
                html += `<button class="btn btn-sm btn-outline-primary mx-1" data-page="${current + 1}">Next</button>`;
            }
      
            $('#pagination').html(html);
        }
      
        function togglePagination(totalRecords) {
          $("#pagination").toggle(totalRecords > pageSize);
        }
      
        function getStateFromURL() {
          const params = new URLSearchParams(window.location.search);
          return {
            page: parseInt(params.get('page')) || 1,
            limit: parseInt(params.get('limit')) || 10,
            search: params.get('search') || ''
          };
        }
      
        function updateURLParams() {
            const params = new URLSearchParams();
            params.set('page', currentPage);
            params.set('limit', pageSize);
            if (searchQuery) params.set('search', searchQuery);
      
            const newUrl = `${window.location.pathname}?${params.toString()}`;
            window.history.replaceState({}, '', newUrl);
        }
      
        $(document).ready(function () {
          const state = getStateFromURL();
          currentPage = state.page;
          pageSize = state.limit;
          searchQuery = state.search;
      
          // Pre-populate inputs
          $('#pageSize').val(pageSize);
          $('#searchInput').val(searchQuery);
      
          // Pagination click
          $(document).on("click", "#pagination button", function () {
            currentPage = parseInt($(this).data("page"));
            updateURLParams();
            fetchBrokers();
          });
      
          // Page size change
          $("#pageSize").on("change", function () {
            pageSize = parseInt($(this).val());
            currentPage = 1;
            updateURLParams();
            fetchBrokers();
          });
      
          // Search input
          $("#searchInput").on("input", function () {
            searchQuery = $(this).val();
            currentPage = 1;
            updateURLParams();
            fetchBrokers();
          });
      
          // Sort click
          $(document).on("click", ".sort", function (e) {
            e.preventDefault();
            const newField = $(this).data("sort");
      
            if (sortField === newField) {
              sortOrder = sortOrder === "asc" ? "desc" : "asc";
            } else {
              sortField = newField;
              sortOrder = "asc";
            }
      
            $(".sort").removeClass("asc desc");
            $(this).addClass(sortOrder);
      
            currentPage = 1;
            updateURLParams();
            fetchBrokers();
          });
      
          // Initial fetch
          fetchBrokers();
        });
        
        $(document).on('click', '.broker-delete', function (event) {
            event.preventDefault(); // prevent default link behavior
            const brokerId = $(this).data('id'); // get the specific broker ID

            Swal.fire({
                title: "Are you sure?",
                text: "You won't be able to revert back!",
                showCancelButton: true,
                confirmButtonColor: "#4ac18e",
                cancelButtonColor: "#f46a6a",
                confirmButtonText: "Yes, delete it!"
            }).then(function (result) {
                if (result.value) {
                    $.ajax({
                        url: `/deleteBroker/${brokerId}`,
                        method: "DELETE",
                        success: function (res) {
                            if (res.status === true) {
                                Swal.fire("Deleted!", "broker deleted successfully.", "success");
                                //location.reload();
                                window.location.href = '/brokersList';
                            } else {
                                Swal.fire("Deleted!", res.message || "An error occurred. Please try again.", "error");
                                //showNotification("error", res.message || "An error occurred. Please try again.");
                            }
                        },
                        error: function (xhr) {
                            if (xhr.status === 401) {
                                //showNotification('error', 'Token is expired or missing');
                                Swal.fire("", "Token is expired or missing.", "error");
                                window.location.href = '/login';
                            } else {
                                //showNotification('error', xhr.responseJSON?.message || 'An error occurred. Please try again.');
                                Swal.fire("Deleted!", xhr.responseJSON?.message || 'An error occurred. Please try again.', "error");

                            }
                        }
                    });
                }
            });
        });
        
        function openChangePassword(email) {
            $("#email").val(email || ""); // Fill email if provided
            $('#newPassword').val('');
            $('#confirmPassword').val('');
            $("#changePasswordModal").show();
        } 

  function closeChangePassword() {
    $("#newPassword").val("")
    $("#confirmPassword").val("")
    $("#changePasswordModal").hide();
  }

  $("#changePasswordForm").submit(function (e) {
    e.preventDefault();

    const email = $("#email").val().trim();
    const newPassword = $("#newPassword").val().trim();
    const confirmPassword = $("#confirmPassword").val().trim();

    $("#newPasswordError").text("");
    $("#confirmPasswordError").text("");

    let hasError = false;

    if (!newPassword) {
      $("#newPasswordError").text("New Password is required.");
      hasError = true;
    }

    if (!confirmPassword) {
      $("#confirmPasswordError").text("Confirm Password is required.");
      hasError = true;
    }

    if (newPassword !== confirmPassword) {
      Swal.fire("", "New Password and Confirm Password do not match!", "error");
      return;
    }

    if (hasError) return;

    $.ajax({
      url: "/updatePassword", // backend API
      method: "POST",
      contentType: "application/json",
      data: JSON.stringify({
        email: email,
        newPassword: newPassword,
      }),
      xhrFields: {
        withCredentials: true,
      },
      success: function (response) {
        if (response.success !== true) {
          //alert("Error updating password: " + response.message);
          Swal.fire("", response.message||"Smothing went wrong please try again.", "error");
          return;
        }
        // closeChangePassword();
        // Close modal
        const modalEl = document.getElementById('changePasswordModal');
        const modal = bootstrap.Modal.getInstance(modalEl);
        modal.hide();
        //showNotification("success", "Password updated successfully!");
        Swal.fire("", "Password updated successfully!", "success");
      },
      error: (xhr) => {
        if (xhr.status === 401) {
            //showNotification("error", "Token is expired or missing");
            Swal.fire("", "Token is expired or missing", "error");
            window.location.href = "/login";
        } else {
            //showNotification("error", "Server error.");
            Swal.fire("", "Server error.", "error");
        }
      },
    });
  });

    </script>
<%- contentFor('BottomJs') %>